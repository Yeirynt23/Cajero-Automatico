#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <Keypad.h>
#include <Servo.h>
#include <EEPROM.h>

LiquidCrystal_I2C lcd(0x27, 16, 2);

const byte ROW_NUM = 4;
const byte COLUMN_NUM = 4;
char keys[ROW_NUM][COLUMN_NUM] = {
  {'1','2','3','A'},
  {'4','5','6','B'},
  {'7','8','9','C'},
  {'*','0','#','D'}
};
byte pin_rows[ROW_NUM] = {9, 8, 7, 6};
byte pin_column[COLUMN_NUM] = {5, 4, 3, 2};
Keypad keypad = Keypad(makeKeymap(keys), pin_rows, pin_column, ROW_NUM, COLUMN_NUM);

const int trigPin = 10;
const int echoPin = 11;

Servo servo1;
Servo servo2;

// Estructura de datos para usuarios
struct Usuario {
  String numeroTarjeta;
  String pin;
  float saldo;
};

// Definición de usuarios
Usuario usuarios[] = {
  {"1234567890123456", "1234", 1000.0},  // Usuario 1
  {"9876543210987654", "5678", 1500.0},  // Usuario 2
  {"1122334455667788", "ABCD", 2000.0}   // Usuario 3
};

// Índice del usuario actual
int indiceUsuarioActual = -1;

float saldoDisponible = 1000.0; // Saldo inicial
bool tarjetaInsertada = false;

// Variables para bloqueo de tarjeta
int intentosFallidos = 0;
const int maxIntentos = 3;
bool tarjetaBloqueada = false;
unsigned long tiempoDesbloqueo = 0; // Variable para rastrear el tiempo de desbloqueo

// Declaración de la función displayMessage
void displayMessage(String message);

void setup() {
  Serial.begin(9600);  // Inicializa la comunicación serial
  lcd.init();
  lcd.backlight();
  lcd.setCursor(0, 0);
  lcd.print("   ExpressBank");
  lcd.setCursor(0, 1);
  lcd.print("Inserte Tarjeta");

  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);

  servo1.attach(12); // Ajusta los pines según la conexión real
  servo2.attach(13);
servo1.write(0);
  // Inicializa otros pines según sea necesario para indicadores LED, etc.
}

void loop() {
  if (!tarjetaBloqueada) {
    while (!tarjetaInsertada) {
      if (detectCardInsertion()) {
        tarjetaInsertada = true;
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("Inserte su PIN:");
        Serial.println("Tarjeta detectada. Inserte su PIN.");
        
      }
    }

    String pinCode = getPIN();

    // Validar el PIN para todos los usuarios
    for (int i = 0; i < sizeof(usuarios) / sizeof(usuarios[0]); i++) {
      if (validatePIN(pinCode, usuarios[i])) {
        // Establecer el índice del usuario actual
        indiceUsuarioActual = i;

        lcd.clear();
        lcd.setCursor(0, 0);
        displayMessage("1. Consultar");
        displayMessage("2. Retirar");

        char userChoice = getKey();

        switch (userChoice) {
          case '1':
            checkBalance();
            break;

          case '2':
            if (confirmOperation()) {
              lcd.clear();
              lcd.setCursor(0, 0);
              displayMessage("Ingrese el monto:");
              int withdrawAmount = getAmount();
              if (withdrawAmount >= 100 && withdrawAmount <= usuarios[indiceUsuarioActual].saldo) {
                withdrawCash(withdrawAmount);
              } else {
                lcd.clear();
                lcd.setCursor(0, 0);
                if (withdrawAmount > usuarios[indiceUsuarioActual].saldo) {
                  displayMessage("Cuenta con $" + String(usuarios[indiceUsuarioActual].saldo));
                } else {
                  displayMessage("Monto no Valido");
                }
                Serial.println("Operación cancelada: Monto no válido.");
                delay(2000);
                // Reinicia el ciclo después de completar una transacción
                tarjetaInsertada = false;
                resetDisplay();
                // Reinicia el contador de intentos fallidos si la operación es exitosa
                intentosFallidos = 0;
              }
            }
            break;

          // Agrega más casos para otras operaciones
        }

        // Reinicia el ciclo después de completar una transacción
        tarjetaInsertada = false;
        resetDisplay();
        // Reinicia el contador de intentos fallidos si la operación es exitosa
        intentosFallidos = 0;
        break;  // Sal del bucle al encontrar una coincidencia de PIN
      }
    }

    // Si no se encuentra ningún usuario con el PIN ingresado
    if (indiceUsuarioActual == -1) {
      // Incrementa el contador de intentos fallidos
      intentosFallidos++;

      // Bloquea la tarjeta después de tres intentos fallidos
      if (intentosFallidos >= maxIntentos) {
        lcd.clear();
        lcd.setCursor(0, 0);
        displayMessage("Tarjeta bloqueada");
        Serial.println("Tarjeta bloqueada después de 3 intentos fallidos.");

        // Establece el tiempo de desbloqueo a 10 segundos en el futuro
        tiempoDesbloqueo = millis() + 10000;
        tarjetaBloqueada = true;
      } else {
        lcd.clear();
        lcd.setCursor(0, 0);
        displayMessage("PIN incorrecto");
        Serial.println("PIN incorrecto. Inténtelo de nuevo.");
        delay(2000);
      }
    }
  } else {
    // Verifica si el tiempo de desbloqueo ha pasado
    if (millis() >= tiempoDesbloqueo) {
      // Desbloquea la tarjeta después de 10 segundos
      tarjetaBloqueada = false;
      resetDisplay();
      // Restablece el índice del usuario actual
      indiceUsuarioActual = -1;
    } else {
      lcd.clear();
      lcd.setCursor(0, 0);
      displayMessage("Tarjeta bloqueada");
      Serial.println("Tarjeta bloqueada. Contacte al banco.");
      delay(2000);
    }
  }
}

bool detectCardInsertion() {
  while (!ultrasonicSensorDetects()) {
    delay(500);
  }

  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Inserte su PIN:");
  Serial.println("Tarjeta detectada. Inserte su PIN.");

  return true;
}

bool ultrasonicSensorDetects() {
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);

  long duration = pulseIn(echoPin, HIGH);
  float distance = duration * 0.034 / 2;

  return (distance < 10);  // Ajusta este valor según la distancia a la que está tu mano con la tarjeta.
}

String getPIN() {
  String pinCode = "";
  char key;

  do {
    key = getKey();

    if (key != NO_KEY) {
      if (key != '#') {
        pinCode += key;
        lcd.setCursor(pinCode.length() - 1, 1);
        lcd.print('*');
      }
    }

    delay(500);
  } while (key != '#' && tarjetaInsertada);

  return pinCode;
}

bool validatePIN(String pin, Usuario& usuario) {
  // Aquí deberías implementar una lógica más segura para validar el PIN
  bool isValid = pin == usuario.pin;
  if (!isValid) {
    Serial.println("PIN incorrecto. Inténtelo de nuevo.");
  }
  return isValid;
}

char getKey() {
  char key = keypad.getKey();

  while (key == NO_KEY) {
    key = keypad.getKey();
    delay(100);
  }

  return key;
}

void checkBalance() {
  // Simula la operación de consultar saldo
  lcd.clear();
  lcd.setCursor(0, 0);
  displayMessage("Saldo: $" + String(usuarios[indiceUsuarioActual].saldo));
  Serial.println("Consulta de saldo. Saldo actual: $" + String(usuarios[indiceUsuarioActual].saldo));
  delay(2000);
}

bool confirmOperation() {
  lcd.clear();
  lcd.setCursor(0, 0);
  displayMessage("Presione 'D' para confirmar");
  Serial.println("Esperando confirmación ('D') para la operación.");
  char key = getKey();
  return (key == 'D');
}

int getAmount() {
  String amountStr = "";
  char key;

  do {
    key = getKey();

    if (key != NO_KEY && key != '#') {
      amountStr += key;
      lcd.clear();
      lcd.setCursor(0, 0);
      displayMessage("Ingrese el monto:");
      displayMessage(amountStr);
    }

    delay(500);
  } while (key != '#' && tarjetaInsertada);

  int amount = amountStr.toInt();

  // Verifica si el monto es inválido
  if (amount < 100 || amount > usuarios[indiceUsuarioActual].saldo) {
    lcd.clear();
    lcd.setCursor(0, 0);
    if (amount > usuarios[indiceUsuarioActual].saldo) {
      displayMessage("Cuenta con $" + String(usuarios[indiceUsuarioActual].saldo));
    } else {
      displayMessage("Monto no Valido");
    }
    Serial.println("Operación cancelada: Monto no válido.");
    delay(2000);
    // Vuelve a pedir al usuario que ingrese el monto
    amount = getAmount();
  }

  return amount;
}

void withdrawCash(int amount) {
  // Verifica que el monto sea mayor o igual al monto mínimo
  if (amount >= 100) {
    // Simula la operación de retirar efectivo
    lcd.clear();
    lcd.setCursor(0, 0);
    displayMessage("Retirando $" + String(amount));
    Serial.println("Retirando $" + String(amount));
    delay(2000);

    usuarios[indiceUsuarioActual].saldo -= amount; // Actualiza el saldo después del retiro

    // Simula el movimiento de los servos para dispensar efectivo
    servo1.write(180);
    servo2.write(90);
    delay(2000);
    servo1.write(0);
    servo2.write(0);

    lcd.clear();
    lcd.setCursor(0, 0);
    displayMessage("Operacion completada");
    Serial.println("Saldo restante: $" + String(usuarios[indiceUsuarioActual].saldo));
    delay(2000);
  } else {
    // Si el monto es menor al mínimo, muestra un mensaje de error y cancela la operación
    lcd.clear();
    lcd.setCursor(0, 0);
    displayMessage("Monto minimo: $100");
    displayMessage("Ingrese el monto:");

    // Muestra el saldo actual
    lcd.setCursor(0, 1);
    displayMessage("Cuenta con $" + String(usuarios[indiceUsuarioActual].saldo));

    // Espera a que el usuario ingrese el monto nuevamente
    int nuevoMonto = getAmount();
    
    if (nuevoMonto >= 100 && nuevoMonto <= usuarios[indiceUsuarioActual].saldo) {
      // Si el nuevo monto es válido, realiza la operación
      withdrawCash(nuevoMonto);
    } else {
      // Si el nuevo monto no es válido, muestra un mensaje de error y cancela la operación
      lcd.clear();
      lcd.setCursor(0, 0);
      if (nuevoMonto > usuarios[indiceUsuarioActual].saldo) {
        displayMessage("Cuenta con $" + String(usuarios[indiceUsuarioActual].saldo));
      } else {
        displayMessage("Monto no valido");
      }
      Serial.println("Operación cancelada: Monto no válido.");
      delay(2000);
      // Reinicia el ciclo después de completar una transacción
      tarjetaInsertada = false;
      resetDisplay();
    }
  }

  // Reinicia el ciclo después de completar una transacción
  tarjetaInsertada = false;
  resetDisplay();
}

void resetDisplay() {
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("   ExpressBank");
  lcd.setCursor(0, 1);
  lcd.print("Inserte Tarjeta");
  tarjetaInsertada = false;
}

// Implementación de la función displayMessage
void displayMessage(String message) {
  lcd.print(message.substring(0, 16)); // Asegura que el mensaje se ajuste al ancho de la pantalla
  lcd.setCursor(0, 1);
  lcd.print(message.substring(16, 32)); // Asegura que el mensaje se ajuste al ancho de la pantalla
}
